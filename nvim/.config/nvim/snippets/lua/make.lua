local ls = require("luasnip")
local s = ls.snippet
local t = ls.text_node

return {
  s(
    "!!gomake",
    t({
      "# Makefile for Go projects",
      "",
      "# Change these variables as necessary.",
      "MAIN_PACKAGE_PATH := ./",
      "BINARY_NAME := example",
      "BIN_DIR := ./bin",
      "TMP_DIR := ./tmp",
      "",
      "# Ensure directories exist",
      "$(BIN_DIR):",
      "\t@mkdir -p $(BIN_DIR)",
      "",
      "$(TMP_DIR):",
      "\t@mkdir -p $(TMP_DIR)",
      "",
      "## help: print this help message",
      ".PHONY: help",
      "help:",
      "\t@echo 'Usage:'",
      "\t@sed -n 's/^##//p' $(MAKEFILE_LIST) | column -t -s ':' |  sed -e 's/^/ /'",
      "",
      ".PHONY: confirm",
      "confirm:",
      "\t@echo -n 'Are you sure? [y/N] ' && read ans && [ $${ans:-N} = y ]",
      "",
      ".PHONY: no-dirty",
      "no-dirty:",
      "\tgit diff --exit-code",
      "",
      "## tidy: format code and tidy modfile",
      ".PHONY: tidy",
      "tidy:",
      "\tgo fmt ./...",
      "\tgo mod tidy -v",
      "",
      "## audit: run quality control checks",
      ".PHONY: audit",
      "audit:",
      "\tgo mod verify",
      "\tgo vet ./...",
      "\tgo run honnef.co/go/tools/cmd/staticcheck@latest -checks=all,-ST1000,-U1000 ./...",
      "\tgo run golang.org/x/vuln/cmd/govulncheck@latest ./...",
      "\tgo test -race -buildvcs -vet=off ./...",
      "",
      "## test: run all tests",
      ".PHONY: test",
      "test:",
      "\tgo test -v -race -buildvcs ./...",
      "",
      "## test/cover: run all tests and display coverage",
      ".PHONY: test/cover",
      "test/cover:",
      "\t@go test -v -race -buildvcs -coverprofile=$(TMP_DIR)/coverage.out ./...",
      "\t@go tool cover -html=$(TMP_DIR)/coverage.out",
      "",
      "## build: build the application",
      ".PHONY: build",
      "build: $(BIN_DIR)",
      "\t@go build -o=$(BIN_DIR)/$(BINARY_NAME) $(MAIN_PACKAGE_PATH)",
      "",
      "## run: run the application",
      ".PHONY: run",
      "run: build",
      "\t@$(BIN_DIR)/$(BINARY_NAME)",
      "",
      "## run/live: run the application with reloading on file changes",
      ".PHONY: run/live",
      "run/live: $(BIN_DIR) $(TMP_DIR)",
      "\tgo run github.com/cosmtrek/air@v1.43.0 \\",
      '\t\t--build.cmd "make build" --build.bin "$(BIN_DIR)/$(BINARY_NAME)" --build.delay "100" \\',
      '\t\t--build.exclude_dir "" \\',
      '\t\t--build.include_ext "go, tpl, tmpl, html, css, scss, js, ts, sql, jpeg, jpg, gif, png, bmp, svg, webp, ico" \\',
      '\t\t--misc.clean_on_exit "true"',
      "",
      "## push: push changes to the remote Git repository",
      ".PHONY: push",
      "push: tidy audit no-dirty",
      "\tgit push",
      "",
      "## production/deploy: deploy the application to production",
      ".PHONY: production/deploy",
      "production/deploy: confirm tidy audit no-dirty",
      "\tGOOS=linux GOARCH=amd64 go build -ldflags='-s' -o=$(TMP_DIR)/linux_amd64/$(BINARY_NAME) $(MAIN_PACKAGE_PATH)",
      "\tupx -5 $(TMP_DIR)/linux_amd64/$(BINARY_NAME)",
      "\t# Include additional deployment steps here...",
    })
  ),
}
